// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `TodoList.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct TodoList {
    // message fields
    pub owner_id: i32,
    pub owner_name: ::std::string::String,
    pub todos: ::protobuf::RepeatedField<TodoList_ListItems>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TodoList {
    fn default() -> &'a TodoList {
        <TodoList as ::protobuf::Message>::default_instance()
    }
}

impl TodoList {
    pub fn new() -> TodoList {
        ::std::default::Default::default()
    }

    // int32 owner_id = 1;


    pub fn get_owner_id(&self) -> i32 {
        self.owner_id
    }
    pub fn clear_owner_id(&mut self) {
        self.owner_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_owner_id(&mut self, v: i32) {
        self.owner_id = v;
    }

    // string owner_name = 2;


    pub fn get_owner_name(&self) -> &str {
        &self.owner_name
    }
    pub fn clear_owner_name(&mut self) {
        self.owner_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_owner_name(&mut self, v: ::std::string::String) {
        self.owner_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner_name(&mut self) -> &mut ::std::string::String {
        &mut self.owner_name
    }

    // Take field
    pub fn take_owner_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.owner_name, ::std::string::String::new())
    }

    // repeated .protoblog.TodoList.ListItems todos = 3;


    pub fn get_todos(&self) -> &[TodoList_ListItems] {
        &self.todos
    }
    pub fn clear_todos(&mut self) {
        self.todos.clear();
    }

    // Param is passed by value, moved
    pub fn set_todos(&mut self, v: ::protobuf::RepeatedField<TodoList_ListItems>) {
        self.todos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_todos(&mut self) -> &mut ::protobuf::RepeatedField<TodoList_ListItems> {
        &mut self.todos
    }

    // Take field
    pub fn take_todos(&mut self) -> ::protobuf::RepeatedField<TodoList_ListItems> {
        ::std::mem::replace(&mut self.todos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TodoList {
    fn is_initialized(&self) -> bool {
        for v in &self.todos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.owner_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.owner_name)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.todos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.owner_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.owner_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.owner_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.owner_name);
        }
        for value in &self.todos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.owner_id != 0 {
            os.write_int32(1, self.owner_id)?;
        }
        if !self.owner_name.is_empty() {
            os.write_string(2, &self.owner_name)?;
        }
        for v in &self.todos {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TodoList {
        TodoList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "owner_id",
                |m: &TodoList| { &m.owner_id },
                |m: &mut TodoList| { &mut m.owner_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "owner_name",
                |m: &TodoList| { &m.owner_name },
                |m: &mut TodoList| { &mut m.owner_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TodoList_ListItems>>(
                "todos",
                |m: &TodoList| { &m.todos },
                |m: &mut TodoList| { &mut m.todos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TodoList>(
                "TodoList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TodoList {
        static instance: ::protobuf::rt::LazyV2<TodoList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TodoList::new)
    }
}

impl ::protobuf::Clear for TodoList {
    fn clear(&mut self) {
        self.owner_id = 0;
        self.owner_name.clear();
        self.todos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TodoList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TodoList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TodoList_ListItems {
    // message fields
    pub state: TaskState,
    pub task: ::std::string::String,
    pub due_date: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TodoList_ListItems {
    fn default() -> &'a TodoList_ListItems {
        <TodoList_ListItems as ::protobuf::Message>::default_instance()
    }
}

impl TodoList_ListItems {
    pub fn new() -> TodoList_ListItems {
        ::std::default::Default::default()
    }

    // .protoblog.TaskState state = 1;


    pub fn get_state(&self) -> TaskState {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = TaskState::TASK_OPEN;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: TaskState) {
        self.state = v;
    }

    // string task = 2;


    pub fn get_task(&self) -> &str {
        &self.task
    }
    pub fn clear_task(&mut self) {
        self.task.clear();
    }

    // Param is passed by value, moved
    pub fn set_task(&mut self, v: ::std::string::String) {
        self.task = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_task(&mut self) -> &mut ::std::string::String {
        &mut self.task
    }

    // Take field
    pub fn take_task(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.task, ::std::string::String::new())
    }

    // string due_date = 3;


    pub fn get_due_date(&self) -> &str {
        &self.due_date
    }
    pub fn clear_due_date(&mut self) {
        self.due_date.clear();
    }

    // Param is passed by value, moved
    pub fn set_due_date(&mut self, v: ::std::string::String) {
        self.due_date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_due_date(&mut self) -> &mut ::std::string::String {
        &mut self.due_date
    }

    // Take field
    pub fn take_due_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.due_date, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TodoList_ListItems {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.task)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.due_date)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != TaskState::TASK_OPEN {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if !self.task.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.task);
        }
        if !self.due_date.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.due_date);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != TaskState::TASK_OPEN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if !self.task.is_empty() {
            os.write_string(2, &self.task)?;
        }
        if !self.due_date.is_empty() {
            os.write_string(3, &self.due_date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TodoList_ListItems {
        TodoList_ListItems::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TaskState>>(
                "state",
                |m: &TodoList_ListItems| { &m.state },
                |m: &mut TodoList_ListItems| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "task",
                |m: &TodoList_ListItems| { &m.task },
                |m: &mut TodoList_ListItems| { &mut m.task },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "due_date",
                |m: &TodoList_ListItems| { &m.due_date },
                |m: &mut TodoList_ListItems| { &mut m.due_date },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TodoList_ListItems>(
                "TodoList.ListItems",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TodoList_ListItems {
        static instance: ::protobuf::rt::LazyV2<TodoList_ListItems> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TodoList_ListItems::new)
    }
}

impl ::protobuf::Clear for TodoList_ListItems {
    fn clear(&mut self) {
        self.state = TaskState::TASK_OPEN;
        self.task.clear();
        self.due_date.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TodoList_ListItems {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TodoList_ListItems {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TaskState {
    TASK_OPEN = 0,
    TASK_IN_PROGRESS = 1,
    TASK_POST_PONED = 2,
    TASK_CLOSED = 3,
    TASK_DONE = 4,
}

impl ::protobuf::ProtobufEnum for TaskState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TaskState> {
        match value {
            0 => ::std::option::Option::Some(TaskState::TASK_OPEN),
            1 => ::std::option::Option::Some(TaskState::TASK_IN_PROGRESS),
            2 => ::std::option::Option::Some(TaskState::TASK_POST_PONED),
            3 => ::std::option::Option::Some(TaskState::TASK_CLOSED),
            4 => ::std::option::Option::Some(TaskState::TASK_DONE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TaskState] = &[
            TaskState::TASK_OPEN,
            TaskState::TASK_IN_PROGRESS,
            TaskState::TASK_POST_PONED,
            TaskState::TASK_CLOSED,
            TaskState::TASK_DONE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TaskState>("TaskState", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TaskState {
}

impl ::std::default::Default for TaskState {
    fn default() -> Self {
        TaskState::TASK_OPEN
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eTodoList.proto\x12\tprotoblog\"\xe1\x01\n\x08TodoList\x12\x19\n\
    \x08owner_id\x18\x01\x20\x01(\x05R\x07ownerId\x12\x1d\n\nowner_name\x18\
    \x02\x20\x01(\tR\townerName\x123\n\x05todos\x18\x03\x20\x03(\x0b2\x1d.pr\
    otoblog.TodoList.ListItemsR\x05todos\x1af\n\tListItems\x12*\n\x05state\
    \x18\x01\x20\x01(\x0e2\x14.protoblog.TaskStateR\x05state\x12\x12\n\x04ta\
    sk\x18\x02\x20\x01(\tR\x04task\x12\x19\n\x08due_date\x18\x03\x20\x01(\tR\
    \x07dueDate*e\n\tTaskState\x12\r\n\tTASK_OPEN\x10\0\x12\x14\n\x10TASK_IN\
    _PROGRESS\x10\x01\x12\x13\n\x0fTASK_POST_PONED\x10\x02\x12\x0f\n\x0bTASK\
    _CLOSED\x10\x03\x12\r\n\tTASK_DONE\x10\x04J\xa5\x05\n\x06\x12\x04\0\0\
    \x17\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\
    \x12\n\n\n\x02\x05\0\x12\x04\x04\0\n\x01\n\n\n\x03\x05\0\x01\x12\x03\x04\
    \x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x04\x12\n\x0c\n\x05\x05\0\
    \x02\0\x01\x12\x03\x05\x04\r\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x05\x10\
    \x11\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x04\x19\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03\x06\x04\x14\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x06\
    \x17\x18\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x07\x04\x18\n\x0c\n\x05\x05\0\
    \x02\x02\x01\x12\x03\x07\x04\x13\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\
    \x07\x16\x17\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x08\x04\x14\n\x0c\n\x05\
    \x05\0\x02\x03\x01\x12\x03\x08\x04\x0f\n\x0c\n\x05\x05\0\x02\x03\x02\x12\
    \x03\x08\x12\x13\n\x0b\n\x04\x05\0\x02\x04\x12\x03\t\x04\x12\n\x0c\n\x05\
    \x05\0\x02\x04\x01\x12\x03\t\x04\r\n\x0c\n\x05\x05\0\x02\x04\x02\x12\x03\
    \t\x10\x11\n\n\n\x02\x04\0\x12\x04\x0c\0\x17\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\x0c\x08\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\r\x04\x17\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\r\x04\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\r\n\
    \x12\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\r\x15\x16\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x0e\x04\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0e\x04\n\
    \n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x0e\x0b\x15\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x0e\x18\x19\n\x0c\n\x04\x04\0\x03\0\x12\x04\x10\x04\x14\
    \x05\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x10\x0c\x15\n\r\n\x06\x04\0\x03\
    \0\x02\0\x12\x03\x11\x08\x1c\n\x0e\n\x07\x04\0\x03\0\x02\0\x06\x12\x03\
    \x11\x08\x11\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x11\x12\x17\n\x0e\
    \n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x11\x1a\x1b\n\r\n\x06\x04\0\x03\0\
    \x02\x01\x12\x03\x12\x08\x18\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\
    \x12\x08\x0e\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x12\x0f\x13\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\x12\x16\x17\n\r\n\x06\x04\0\
    \x03\0\x02\x02\x12\x03\x13\x08\x1c\n\x0e\n\x07\x04\0\x03\0\x02\x02\x05\
    \x12\x03\x13\x08\x0e\n\x0e\n\x07\x04\0\x03\0\x02\x02\x01\x12\x03\x13\x0f\
    \x17\n\x0e\n\x07\x04\0\x03\0\x02\x02\x03\x12\x03\x13\x1a\x1b\n\x0b\n\x04\
    \x04\0\x02\x02\x12\x03\x16\x04!\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\
    \x16\x04\x0c\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x16\r\x16\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x16\x17\x1c\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x16\x1f\x20b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
